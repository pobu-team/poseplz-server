import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.7.22'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.7.22'
    id "com.google.cloud.tools.jib" version "3.3.1"
}

group = 'com.poseplz'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$springdocVersion"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:$springdocVersion"
    implementation "com.amazonaws:aws-java-sdk-s3:${awsJavaSdkVersion}"
    runtimeOnly "com.mysql:mysql-connector-j:${mysqlVersion}"

    // admin
    implementation "org.webjars:webjars-locator:$webjarsLocatorVersion"
    implementation "org.webjars:bootstrap:$webjarsBootstrapVersion"
    implementation "org.webjars:jquery:$webjarsJqueryVersion"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testRuntimeOnly 'com.h2database:h2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs = ['-Xjsr305=strict']
        jvmTarget = '17'
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.named('jar') {
    enabled = false
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
String now = new Date().format('yyyyMMddHHmmss')

jib {
    from {
        image = 'eclipse-temurin:17-jre-focal'
    }
    container {
        ports = ['8080']
        jvmFlags = [
                '-Xms512m',
                '-Xmx512m',
                '-Duser.timezone=Asia/Seoul',
                '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'
        ]
    }
    to {
        image = properties.getProperty('dockerImageName')
        auth {
            username = properties.getProperty('dockerUsername')
            password = properties.getProperty('dockerPassword')
        }
        tags = ["latest", "$now"]
    }
}
